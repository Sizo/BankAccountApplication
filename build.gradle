plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'checkstyle'
    id 'org.openapi.generator' version '7.0.1'
}

// Import the GenerateTask class
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

group = 'co.za.demo'
version = '0.0.1-SNAPSHOT'
description = 'BankAccountApplication'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Database dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.h2database:h2'

    // MapStruct
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

    annotationProcessor 'org.projectlombok:lombok'

    // Lombok and MapStruct integration
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // OpenAPI dependencies
    implementation 'org.openapitools:jackson-databind-nullable:0.2.6'
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.15'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.20.0'
    configFile = file('config/checkstyle/google_checks.xml')
    configProperties = [
        'org.checkstyle.google.suppressionfilter.config': "${rootDir}/config/checkstyle/checkstyle-suppressions.xml",
        'org.checkstyle.google.suppressionxpathfilter.config': "${rootDir}/config/checkstyle/checkstyle-xpath-suppressions.xml",
        'org.checkstyle.google.severity': 'warning'
    ]
    maxWarnings = 10
    ignoreFailures = true
}

// Convenience aggregate (optional): runs both main and test.
tasks.register('checkstyleAll') {
    group = 'verification'
    description = 'Runs Checkstyle on all source sets.'
    dependsOn 'checkstyleMain', 'checkstyleTest'
}

// Make general 'check' depend on style verification.
tasks.named('check') { dependsOn 'checkstyleAll' }

// OpenAPI Generator task following your pattern
tasks.register("generateBankAccountSpecification", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/src/main/resources/openapi/bank-account-api.yaml")
    outputDir.set("$buildDir/generated-sources/openapi")
    modelPackage.set("co.za.demo.bankaccountapplication.model.dto")
    apiPackage.set("co.za.demo.bankaccountapplication.api")
    configOptions.set([
        "openApiNullable": "false",
        "interfaceOnly": "true",
        "dateLibrary": "java8",
        "useJakartaEe": "true",
        "useTags": "true",
        "useSpringBoot3": "true",
        "delegatePattern": "true",
        "skipDefaultInterface": "true",
        "useBeanValidation": "true",
        "performBeanValidation": "true"
    ])
    generateModelTests = false
    skipValidateSpec = true
}

// Add generated sources to the source sets
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/openapi/src/main/java"
        }
    }
}

// Make sure code generation runs before any compilation task
tasks.withType(JavaCompile).configureEach {
    dependsOn tasks.generateBankAccountSpecification
}

// Also ensure it runs before processing resources and other compile tasks
compileJava.dependsOn tasks.generateBankAccountSpecification
