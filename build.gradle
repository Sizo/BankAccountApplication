plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"
    id 'checkstyle'
    id 'org.openapi.generator' version "${openapiGeneratorVersion}"
    id 'com.google.cloud.tools.jib' version "${jibVersion}"
}

// Import the GenerateTask class
import org.openapitools.generator.gradle.plugin.tasks.GenerateTask

group = 'co.za.demo'
version = '0.0.1-SNAPSHOT'
description = 'BankAccountApplication'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // Database dependencies
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'

    // Retry and Circuit Breaker dependencies
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    implementation 'org.springframework.boot:spring-boot-starter-aop'

    // Resilience4j for advanced fault tolerance patterns
    implementation "io.github.resilience4j:resilience4j-spring-boot3:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-retry:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-ratelimiter:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-bulkhead:${resilience4jVersion}"
    implementation "io.github.resilience4j:resilience4j-micrometer:${resilience4jVersion}"

    // MapStruct
    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Lombok and MapStruct integration
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"

    // OpenAPI and Swagger UI dependencies
    implementation "org.openapitools:jackson-databind-nullable:${jacksonDatabindNullableVersion}"
    implementation "io.swagger.core.v3:swagger-annotations:${swaggerAnnotationsVersion}"
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${springdocVersion}"

    // Test dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()
}

checkstyle {
    toolVersion = "${checkstyleVersion}"
    configFile = file('config/checkstyle/google_checks.xml')
    configProperties = [
        'org.checkstyle.google.suppressionfilter.config': "${rootDir}/config/checkstyle/checkstyle-suppressions.xml",
        'org.checkstyle.google.suppressionxpathfilter.config': "${rootDir}/config/checkstyle/checkstyle-xpath-suppressions.xml",
        'org.checkstyle.google.severity': 'warning'
    ]
    maxWarnings = 10
    ignoreFailures = true
}

// Convenience aggregate (optional): runs both main and test.
tasks.register('checkstyleAll') {
    group = 'verification'
    description = 'Runs Checkstyle on all source sets.'
    dependsOn 'checkstyleMain', 'checkstyleTest'
}

// Make general 'check' depend on style verification.
tasks.named('check') { dependsOn 'checkstyleAll' }

// OpenAPI Generator task following your pattern
tasks.register("generateBankAccountSpecification", GenerateTask) {
    generatorName.set("spring")
    inputSpec.set("$rootDir/src/main/resources/openapi/bank-account-api.yaml")
    outputDir.set("$buildDir/generated-sources/openapi")
    modelPackage.set("co.za.demo.bankaccountapplication.model.dto")
    apiPackage.set("co.za.demo.bankaccountapplication.api")
    configOptions.set([
        "openApiNullable": "false",
        "interfaceOnly": "true",
        "dateLibrary": "java8",
        "useJakartaEe": "true",
        "useTags": "true",
        "useSpringBoot3": "true",
        "delegatePattern": "true",
        "skipDefaultInterface": "true",
        "useBeanValidation": "true",
        "performBeanValidation": "true"
    ])
    generateModelTests = false
    skipValidateSpec = true
}

// Add generated sources to the source sets
sourceSets {
    main {
        java {
            srcDir "$buildDir/generated-sources/openapi/src/main/java"
        }
    }
}

// Make sure code generation runs before any compilation task
tasks.withType(JavaCompile).configureEach {
    dependsOn tasks.generateBankAccountSpecification
}

// Also ensure it runs before processing resources and other compile tasks
compileJava.dependsOn tasks.generateBankAccountSpecification

// JIB Configuration for Containerization
jib {
    from {
        image = 'eclipse-temurin:21-jre'
        platforms {
            platform {
                architecture = 'amd64'
                os = 'linux'
            }
            platform {
                architecture = 'arm64'
                os = 'linux'
            }
        }
    }
    to {
        image = 'bankapp/bank-account-application'
        tags = ['latest', version]
    }
    container {
        jvmFlags = ['-Xms512m', '-Xmx1024m', '-XX:+UseG1GC', '-XX:+UseContainerSupport']
        mainClass = 'co.za.demo.bankaccountapplication.BankAccountApplication'
        ports = ['8080']
        environment = [
            'SPRING_PROFILES_ACTIVE': 'prod'
        ]
        labels = [
            'maintainer': 'Bank Development Team',
            'version': version,
            'description': 'Banking Application with Fault Tolerance'
        ]
        creationTime = 'USE_CURRENT_TIMESTAMP'
    }
    extraDirectories {
        paths {
            path {
                from = file('src/main/jib')
                into = '/app'
            }
        }
    }
}
